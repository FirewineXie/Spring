<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd">

	<!-- 
			配置bean 
		class:bean 的全类名，通过放射的方式在IOC 容器中创建Bean ,所以要求Bean 中必须要有无参的构造器
		id：标识容器中的Bean， id 必须为唯一;
		
	-->
	<bean id="helloworld" class="com.spring.helloworld.HelloWorld">
		<property name="name" value="Spring"></property>
	</bean>
	<!-- 上面这个相当于main里面的创建类的对象，helloword为对象名，name相当于类里面的变量-->



	<!-- 通过构造方法来配置bean属性 -->
	<bean id="car" class="com.spring.helloworld.Car">
		<constructor-arg value="Audi" index="0"></constructor-arg>
		<constructor-arg  index="1">
		<!-- 如果字面值包含特殊字符可以使用  用CDATA包括起来-->
		<!-- 属性值可以使用value子节点进行配置 -->
			<value><![CDATA[<shanghai^>]]></value>
			<!--含有特殊字符，可以用其前面的进行注释<![CDATA[<shanghai^>]]>-->
		</constructor-arg>	
		<constructor-arg value="30000"  ></constructor-arg>
	</bean>
	<!-- 使用构造器注入属性，可以指定参数的位置和参数的类型，以区分重载的构造器 -->
	<bean id="car2" class="com.spring.helloworld.Car">
		<constructor-arg value="baoma" type="java.lang.String"></constructor-arg>
		<constructor-arg value="shanghai" type="java.lang.String"></constructor-arg>
		<constructor-arg value="432" type="int"></constructor-arg>
	</bean>
	
	<bean id="person" class="com.spring.helloworld.Person">
		<property name="name" value="tom"></property>
		<property name="age" value="24"></property>
		 <!-- 可以使用property 的ref 属性建立bean 之间的引用关系，  -->
		<!--  <property name="car" ref="car2"></property>-->
		<!--  <property name="car">
			<ref bean="car2"/>
		</property> -->
		<!-- 内部bean
		 	不能被外部引用，只能在内部引用
		 -->
			<property name="car">
				<bean class="com.spring.helloworld.Car">
					<constructor-arg value="fute"></constructor-arg>
					<constructor-arg value="changan"></constructor-arg>
					<constructor-arg value="2000000"></constructor-arg>
				</bean>
			</property>
	
	</bean>
	
	<bean id="person2" class="com.spring.helloworld.Person">
		<constructor-arg value="jerry"></constructor-arg>
		<constructor-arg value="25"></constructor-arg>
		<!-- 
		<constructor-arg ref="car"></constructor-arg>
		 -->
		 <!-- 测试赋值null 
		 <constructor-arg ><null/></constructor-arg>
			-->
		<constructor-arg ref="car"></constructor-arg>
		<!-- 为级联属性赋值 -->
		
		<!-- 注意：属性要先初始化，才可以为级联属性赋值，否则会有异常，跟struts2 不一样 -->
		<property name="car.maxSpeed" value="3000"></property>
	</bean>
		<!-- 测试如何配置集合属性 -->
		<bean id="person3" class="com.spring.beans.collection.Person">
			<property name="name" value="mike"></property>
			<property name="age" value="26"></property>
			<!-- 使用list  包含
				数组跟set都是差不多的 ，，但是map不一样他是键值对-->
			<property name="cars">
				<list>
					<ref bean="car"/>
					<ref bean="car2"/>
				</list>
			
			</property>
		</bean>
	
	<!-- 配置map属性值 -->
	<bean id="newperson" class="com.spring.beans.collection.NewPerson">
		<property name="name" value="rose"></property>
		<property name="age" value="28"></property>
		<property name="cars">
			<!-- 使用map节点 map 的entry子节点配置map类型的成员变量 -->
			<map>
				<entry key="AA" value-ref="car"></entry>
				<entry key="BB" value-ref="car2"></entry>
			</map>
		
		</property>
	</bean>
	
	<!-- 配置properti 的属性值 -->
	<bean id="datesource" class="com.spring.beans.collection.DataSource">
		<property name="properties">
		<!-- 使用props和prop  子节点来为Properties 的属性赋值 -->
			<props>
				<prop key="user">root</prop>
				<prop key="passworld">1234</prop>
				<prop key="jdbcurl">33333</prop>
				<prop key="driveclass">text</prop>
			</props>
		
		</property>
	
	
	</bean>
	
	<!-- 配置单例的集合bean  ，以供多个bean 进行引用  -->
	<!-- 需要导入until命名空间 -->
	<util:list id="cars">
		<ref bean="car"/>
		<ref bean="car2"/>
	
	</util:list>
	
	<bean id="person4" class="com.spring.beans.collection.Person">
		<property name="name" value="jacl"></property>
		<property name="age" value="29"></property>
		<property name="cars" ref="cars"></property>
	</bean>
	
	
	<!-- 通过p命名空间为bean 的属性赋值， 需要导入p的命名空间 -->
	<!-- 相对于传统的配置方式更加的简洁 -->
	<bean id="person5" class="com.spring.beans.collection.Person" p:age="30" p:name="queen" p:cars-ref="cars"></bean>
</beans>
